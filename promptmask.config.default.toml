# promptmask.config.default.toml

# Configuration for the local LLM used for masking.
# Environment variables like LOCALAI_API_BASE and LOCALAI_API_KEY are checked first.
[llm_api]
base = "http://localhost:11434/v1"
model = "" # If empty, will auto-detect first available model from /v1/models
key = ""

# Defines what data is considered sensitive.
[sensitive]
# A natural language description of data categories to mask.
# This will be injected into the system prompt for the local LLM.
include = "passwords, social security numbers, any kind of user ID, API Keys, private keys, credit card numbers, phone numbers, physical addresses"
# A natural language description of data categories to explicitly ignore.
exclude = "company names, product names, brand names, general technical terms"

# Defines the mask format.
[mask_wrapper]
left = "${"
right = "}"

# System prompt engineering for the local masking LLM.
[prompt]
system_template = """/no_think You are a data masking API to mask sensitive data in the user input. Respond with ONLY a JSON object mapping the original data to a unique mask. 
Make sure mask mappings are unique and non-overlapping.

Config:
- Sensitive: ${sensitive_include}
- Non-Sensitive: ${sensitive_exclude}
- Mask Format: ${mask_left}UPPER_SNAKE_CASE${mask_right}

The output MUST strictly adhere to the following format, and NO other text MUST be included. If no sensitive data is found, respond with an empty JSON object: `{}`.
<mask_mapping>{"test@example.com":"${mask_left}USER_EMAIL_1${mask_right}","P@ssword123!":"${mask_left}USER_PASSWORD_1${mask_right}"}</mask_mapping>"""

user_template = "<user_input_text>\n${text_to_mask}\n</user_input_text>"

# Few-shot examples to improve local LLM accuracy.
examples = [
    { role = "user", content = "<user_input_text>\nMy name is johndoe, my account ID is 123456789, and my credit card number is 1234-5678-9012-3456.\n</user_input_text>" },
    { role = "assistant", content = "<mask_mapping>{\"johndoe\":\"${mask_left}USER_NAME_1${mask_right}\",\"123456789\":\"${mask_left}ACCOUNT_ID_1${mask_right}\",\"1234-5678-9012-3456\":\"${mask_left}CREDIT_CARD_NUMBER_1${mask_right}\"}</mask_mapping>" },
    { role = "user", content = """<user_input_text>
{
  "user":{
    "name": "John Smith",
    "email": "smith.j@example.com"
  },
  "auth_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
  "ip_address": "203.0.113.75"
}
</user_input_text>""" },
    { role = "assistant", content = "<mask_mapping>{\"John Smith\":\"${mask_left}USER_NAME_1${mask_right}\",\"smith.j@example.com\":\"${mask_left}USER_EMAIL_1${mask_right}\",\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\":\"${mask_left}AUTH_TOKEN_1${mask_right}\",\"203.0.113.75\":\"${mask_left}IP_ADDRESS_1${mask_right}\"}</mask_mapping>" },
    { role = "user", content = """<user_input_text>
import os,requests
API_KEY = "key-a1b2c3d4e5f6g7h8i9j0"
DB_CONNECTION_STRING = "postgres://admin:db_pass_123!@db.internal.net:5432/production"
data = requests.get('https://api.service.com/v1/data', headers={'Authorization': f'Bearer {API_KEY}'}).json()
</user_input_text>""" },
    { role = "assistant", content = "<mask_mapping>{\"key-a1b2c3d4e5f6g7h8i9j0\":\"${mask_left}API_KEY_1${mask_right}\",\"postgres://admin:db_pass_123!@db.internal.net:5432/production\":\"${mask_left}DB_CONNECTION_STRING_1${mask_right}\"}</mask_mapping>" }
]

# General settings
[general]
verbose = false