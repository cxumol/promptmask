# promptmask.config.default.toml

# Configuration for the local LLM used for masking.
# Environment variables like LOCALAI_API_BASE and LOCALAI_API_KEY are checked first.
[llm_api]
base = "http://localhost:11434/v1"
model = "" # If empty, will auto-detect first available model from /v1/models
key = ""
timeout = 15.0

# Defines what data is considered sensitive.
[sensitive]
# A natural language description of data categories to mask.
# This will be injected into the system prompt for the local LLM.
include = "passwords, social security numbers, user ID, API Keys, credit card numbers, phone numbers, IP addresses, and everthing generally considered as privacy"
# A natural language description of data categories to explicitly ignore.
exclude = "company names, product names, brand names, general terms, and everthing else"

# Defines the mask format.
[mask_wrapper]
left = "${"
right = "}"

# System prompt engineering for the local masking LLM.
[prompt]
system_template = """/no_think You are a data masking API to mask sensitive data in the user input. Respond with ONLY a JSON object mapping a unique mask to the original data.
Make sure mask mappings are unique and non-overlapping.

Config:
- Sensitive Data Include: ${sensitive_include}
- Sensitive Data NOT Include: ${sensitive_exclude}
- Granularity: word,phrase
- Mask Key Format: UPPER_SNAKE_CASE

The output MUST strictly adhere to the following format:
1. It MUST be a single, flat JSON object inside a <mask_mapping/> tag.
2. Both keys and values MUST be strings (strictlly string-to-string KV pair).
3. If no sensitive data is found, respond with an empty JSON object: `<mask_mapping>{}</mask_mapping>`.
4. DO NOT include any other text or explanations.

Example of a valid response:
<mask_mapping>{"USER_EMAIL_1":"test@example.com","USER_PASSWORD_1":"P@ssword123!"}</mask_mapping>"""

user_template = "<user_input_text>\n${text_to_mask}\n</user_input_text>"

# Few-shot examples to improve local LLM accuracy.
examples = [
    { role = "user", content = "<user_input_text>\nMy account ID is 123456789, and my credit card number is 1234-5678-9012-3456. Another credit card number is 3456-1234-4567-4321.\n</user_input_text>" },
    { role = "assistant", content = "<mask_mapping>{\"ACCOUNT_ID_1\":\"123456789\",\"CREDIT_CARD_NUMBER_1\":\"1234-5678-9012-3456\",\"CREDIT_CARD_NUMBER_2\":\"3456-1234-4567-4321\"}</mask_mapping>" },
    { role = "user", content = """<user_input_text>
{
  "user":{
    "name": "John Smith",
    "email": "smith.j@example.com"
  },
  "auth_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
  "ip_address": "203.0.113.75"
}
</user_input_text>""" },
    { role = "assistant", content = "<mask_mapping>{\"USER_NAME_1\":\"John Smith\",\"USER_EMAIL_1\":\"smith.j@example.com\",\"AUTH_TOKEN_1\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\"IP_ADDRESS_1\":\"203.0.113.75\"}</mask_mapping>" },
    { role = "user", content = """<user_input_text>
import os,requests
API_KEY = "key-a1b2c3d4e5f6g7h8i9j0"
DB_CONNECTION_STRING = "postgres://admin:db_pass_123!@db.internal.net:5432/production"
data = requests.get('https://api.service.com/v1/data', headers={'Authorization': f'Bearer {API_KEY}'}).json()
</user_input_text>""" },
    { role = "assistant", content = "<mask_mapping>{\"API_KEY_1\":\"key-a1b2c3d4e5f6g7h8i9j0\",\"DB_CONNECTION_STRING_1\":\"postgres://admin:db_pass_123!@db.internal.net:5432/production\"}</mask_mapping>" }
]

# This is only for the optional web API
[web]
upstream_oai_api_base="http://api.openai.com/v1"

# General settings
[general]
verbose = false